def func2(arg6, arg7):
    var22 = var10(arg6, arg7)
    var25 = class7()
    for var26 in xrange(26):
        var27 = var25.func8
        var27(var26, var22)
    def func9(arg28, arg29):
        var30 = ((var22 + arg28) & arg6) ^ arg6
        var31 = arg7 | 883549353 | arg29 | -408324975
        var32 = arg6 & 1466887096
        if var31 < var31:
            var33 = arg28 | arg29 & arg7 + 1882760929
        else:
            var33 = var30 & arg28 & var22 ^ arg29
        var34 = arg6 - ((arg28 - arg29) | arg7)
        var35 = 856 | arg29 ^ -853 | arg29
        var36 = (452121541 + var22) | -792 & var22
        var37 = arg28 | var32
        if var22 < var36:
            var38 = (var31 + var31 | var22) ^ var37
        else:
            var38 = ((arg28 | var30) + arg7) & arg28
        var39 = (-1321602995 | arg28 - var36) | var35
        var40 = ((var39 | 39146884) | var39) | 1306068438
        var41 = (var40 | var36) ^ var30 ^ var40
        var42 = ((var36 | var30) & var35) & arg7
        var43 = var41 - ((var22 & var30) | var39)
        var44 = var30 ^ (arg6 ^ var37)
        var45 = (var39 & var22) ^ var42 + arg7
        var46 = var32 | var36 + var44
        var47 = arg29 | -1949050504 ^ var46
        var48 = ((var46 | var42) ^ var43) - -961
        var49 = var40 | ((var36 ^ arg29) | var46)
        var50 = (var35 ^ var22) - (arg28 - var30)
        var51 = (var42 + var49) | (var47 + arg28)
        var52 = var34 | var22 + var32 & -126110584
        result = ((var48 ^ (var39 ^ var46) + (var48 | var40)) + var22) ^ var40 - ((var34 - var40 + var49) + var46) ^ var39
        return result
    var53 = func9(arg7, arg6)
    var56 = class10()
    for var57 in range(21):
        var56.func11(arg6, arg6)
    var58 = (arg6 + arg6) ^ arg7
    result = ((var58 + -985) - arg6) & arg6 ^ arg7
    return result
class class10(object):
    def func11(self, arg54, arg55):
        result = (0 + ((1 - (arg55 ^ -1 + -1)) - 1)) & 1381169674
        return result
class class7(object):
    def func8(self, arg23, arg24):
        return 0
def func5(arg11, arg12):
    var17 = func6(arg11, arg12)
    var18 = (751 | arg12) | arg12
    var19 = arg12 - ((arg12 | var18) & 352) & arg12 & arg12 ^ (((237 & arg12 & -996) & 7 & (var17 & 1268598423) | (var17 ^ (arg12 ^ -418)) | var18 ^ (arg12 ^ -1711721369) | arg12) + (var18 | 810))
    var20 = arg12 | -893 - var17
    var21 = (arg12 ^ var17) - var18 ^ ((var17 - var19 + arg11) & -81) | 458712582 ^ 1454514505 ^ var18 - var19 | (var18 + var19 + var20 | arg11) | var20
    result = var19 + arg12
    return result
def func6(arg13, arg14):
    var15 = 0
    for var16 in range(22):
        var15 += -6 ^ var15 + var16
    return var15
def func4():
    closure = [2]
    def func3(arg8, arg9):
        closure[0] += func5(arg8, arg9)
        return closure[0]
    func = func3
    return func
var10 = func4()
def func1(arg1, arg2):
    var3 = -430 - arg2
    var4 = arg2 & (956 | (-708 ^ ((-601264767 & (-540 - -1795119514 ^ arg2) + arg2) - -449 - -808086947 ^ (449 | arg1) + (((var3 & arg1) ^ (arg2 | arg2) | -209) & arg2) - -1792180926) - arg2) - arg1) + arg1
    var5 = arg2 & var3
    result = arg1 & var5
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 6'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 59'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,
